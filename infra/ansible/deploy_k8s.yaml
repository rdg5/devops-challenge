---
- hosts: localhost
  become: yes
  pre_tasks:
    - name: Install pip3 if not installed
      apt:
        name: python3-pip
        state: present
        update_cache: yes

    - name: Ensure boto3 is installed
      pip:
        name: boto3
        state: present
        executable: pip3

  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Start and enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    # Use ec2_instance_facts to retrieve instance metadata, including tags
    - name: Get EC2 instance info
      ec2_instance_info:
        region: "eu-west-1"
      register: instance_info

    # Ensure we have a fallback if the Role tag is missing
    - name: Set node_role from EC2 instance tags or default to master
      set_fact:
        node_role: "{{ item.value if item.key == 'Role' else 'master' }}"
      loop: "{{ instance_info.instances[0].tags | dict2items }}"
      when: instance_info.instances[0].tags is defined

    # Debug to confirm the correct node_role is being set
    - name: Debug node role
      debug:
        msg: "Node role is {{ node_role }}"

    # Install k3s on Master
    - name: Install k3s on Master
      shell: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 --disable-agent
      when: node_role == "master"

    # Fetch K3s master IP from SSM
    - name: Get K3s master IP from SSM
      set_fact:
        k3s_master_ip: "{{ lookup('aws_ssm', 'k3s-master-ip', region='eu-west-1') }}"  # Fetch master IP from SSM

    # Fetch K3s node token from SSM
    - name: Get K3s node token from SSM
      set_fact:
        k3s_node_token: "{{ lookup('aws_ssm', 'k3s-node-token', region='eu-west-1') }}"  # Fetch node token from SSM

    # Install k3s on Worker and wait for master to be ready
    - name: Wait for K3s master to be ready
      wait_for:
        host: "{{ aws_ssm_parameter.k3s_master_ip.value }}"
        port: 6443
        state: started
        timeout: 300
      when: node_role == "worker"

    - name: Install k3s on Worker
      shell: |
        MASTER_IP=$(aws ssm get-parameter --name 'k3s-master-ip' --query 'Parameter.Value' --output text)
        NODE_TOKEN=$(aws ssm get-parameter --name 'k3s-node-token' --query 'Parameter.Value' --output text)
        curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 K3S_TOKEN=$NODE_TOKEN sh -
      when: node_role == "worker"

    # Install Helm on worker nodes
    - name: Install Helm (with retries)
      shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      retries: 5
      delay: 30
      register: helm_install_result
      until: helm_install_result.rc == 0
      when: node_role == "worker"

    - name: Log Helm installation result
      debug:
        msg: "Helm installation completed successfully on worker node {{ inventory_hostname }}"

    - name: Add Helm repos for Prometheus and Grafana
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
      when:
        - node_role == "worker"
        - inventory_hostname == groups['worker'][0]  # Only first worker handles this

    - name: Check if repository is already cloned
      stat:
        path: /home/ubuntu/devops-challenge
      register: repo_cloned
      when: node_role == "worker"

    - name: Clone repository
      git:
        repo: https://github.com/rdg5/devops-challenge.git
        dest: /home/ubuntu/devops-challenge
      when:
        - node_role == "worker"
        - not repo_cloned.stat.exists

    # Grafana provisioning and configuration on the worker nodes
    - name: Ensure /etc/grafana/provisioning/datasources directory exists
      file:
        path: /etc/grafana/provisioning/datasources
        state: directory
        mode: '0755'
      when: node_role == "worker"

    - name: Ensure /etc/grafana/provisioning/dashboards directory exists
      file:
        path: /etc/grafana/provisioning/dashboards
        state: directory
        mode: '0755'
      when: node_role == "worker"

    - name: Ensure /var/lib/grafana/dashboards directory exists
      file:
        path: /var/lib/grafana/dashboards
        state: directory
        mode: '0755'
      when: node_role == "worker"

    - name: Check if Grafana datasource file exists
      stat:
        path: /etc/grafana/provisioning/datasources/datasource.yml
      register: datasource_file
      when: node_role == "worker"

    - name: Copy Grafana datasource provisioning file
      copy:
        src: /home/ubuntu/devops-challenge/infra/ansible/grafana/provisioning/datasources/datasource.yml
        dest: /etc/grafana/provisioning/datasources/datasource.yml
        mode: '0644'
      when:
        - node_role == "worker"
        - not datasource_file.stat.exists

    - name: Check if Grafana dashboard provisioning file exists
      stat:
        path: /etc/grafana/provisioning/dashboards/dashboard.yml
      register: dashboard_provisioning_file
      when: node_role == "worker"

    - name: Copy Grafana dashboard provisioning file
      copy:
        src: /home/ubuntu/devops-challenge/infra/ansible/grafana/provisioning/dashboards/dashboard.yml
        dest: /etc/grafana/provisioning/dashboards/dashboard.yml
        mode: '0644'
      when:
        - node_role == "worker"
        - not dashboard_provisioning_file.stat.exists

    - name: Check if Grafana dashboard JSON file exists
      stat:
        path: /var/lib/grafana/dashboards/birdapi-dashboard.json
      register: dashboard_json_file
      when: node_role == "worker"

    - name: Copy Grafana dashboard JSON file
      copy:
        src: /home/ubuntu/devops-challenge/infra/ansible/grafana/provisioning/dashboards/birdapi-dashboard.json
        dest: /var/lib/grafana/dashboards/birdapi-dashboard.json
        mode: '0644'
      when:
        - node_role == "worker"
        - not dashboard_json_file.stat.exists

    # Helm releases for Prometheus and Grafana
    - name: Install Prometheus Operator with Helm (via NodePort)
      shell: |
        helm upgrade --install prometheus-operator prometheus-community/kube-prometheus-stack \
        --set prometheus.service.type=NodePort \
        --set prometheus.service.nodePort=30003 \
        --wait
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      when:
        - node_role == "worker"
        - inventory_hostname == groups['worker'][0]  # First worker runs the Helm task

    - name: Install Grafana with Helm (NodePort 30002 and provisioned dashboards)
      shell: |
        helm upgrade --install grafana grafana/grafana \
        --set adminPassword='your-admin-password' \
        --set service.type=NodePort \
        --set service.nodePort=30002 \
        --set extraVolumes[0].name=grafana-provisioning \
        --set extraVolumes[0].hostPath.path=/etc/grafana/provisioning \
        --set extraVolumes[0].hostPath.type=Directory \
        --set extraVolumes[1].name=grafana-dashboard-vol \
        --set extraVolumes[1].hostPath.path=/var/lib/grafana/dashboards \
        --set extraVolumes[1].hostPath.type=Directory \
        --set extraVolumeMounts[0].name=grafana-provisioning \
        --set extraVolumeMounts[0].mountPath=/etc/grafana/provisioning \
        --set extraVolumeMounts[1].name=grafana-dashboard-vol \
        --set extraVolumeMounts[1].mountPath=/var/lib/grafana/dashboards \
        --wait
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      when:
        - node_role == "worker"
        - inventory_hostname == groups['worker'][0]  # First worker handles Grafana deployment

    - name: Wait for Grafana pod to be ready
      shell: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana  --timeout=120s
      changed_when: false
      when:
        - node_role == "worker"
        - inventory_hostname == groups['worker'][0]

    # Deploying birdImage and birdAPI Helm charts
    - name: Deploy birdImage API using Helm
      shell: |
        helm upgrade --install birdimageapi /home/ubuntu/devops-challenge/helm-charts/birdImage/ \
        -f /home/ubuntu/devops-challenge/helm-charts/birdImage/values-amd64.yaml \
        --namespace default
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      when:
        - node_role == "worker"
        - inventory_hostname == groups['worker'][0]

    - name: Deploy bird API using Helm
      shell: |
        helm upgrade --install birdapi /home/ubuntu/devops-challenge/helm-charts/bird/ \
        -f /home/ubuntu/devops-challenge/helm-charts/bird/values-amd64.yaml \
        --namespace default \
        --set birdImageApiReleaseName=birdimageapi
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      when:
        - node_role == "worker"
        - inventory_hostname == groups['worker'][0]
