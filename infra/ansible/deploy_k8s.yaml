---
- hosts: localhost
  become: yes
  tasks:
    - name: Install Docker
      apt:
        name: docker.io
        state: present
        update_cache: yes

    - name: Start and enable Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Install Python requests
      apt:
        name: python3-requests
        state: present

    - name: Install k3s
      shell: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644

    - name: Install Helm
      shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Add Helm repos for Prometheus and Grafana
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

    - name: Install Prometheus Operator with Helm
      environment: 
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      shell: helm install prometheus-operator prometheus-community/kube-prometheus-stack --wait

    - name: Install Grafana with Helm (NodePort 30002)
      environment: 
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      shell: helm install grafana grafana/grafana --set adminPassword='your-admin-password' --set service.type=NodePort --set service.nodePort=30002 --wait

    - name: Clone repository
      shell: git clone https://github.com/rdg5/devops-challenge.git /home/ubuntu/devops-challenge

    - name: Copy Grafana datasource provisioning file
      copy:
        src: /home/ubuntu/devops-challenge/grafana/provisioning/datasources/datasource.yml
        dest: /etc/grafana/provisioning/datasources/datasource.yml
        owner: grafana
        group: grafana

    - name: Copy Grafana dashboard provisioning file
      copy:
        src: /home/ubuntu/devops-challenge/grafana/provisioning/dashboards/dashboard.yml
        dest: /etc/grafana/provisioning/dashboards/dashboard.yml
        owner: grafana
        group: grafana

    - name: Copy Grafana dashboard JSON file
      copy:
        src: /home/ubuntu/devops-challenge/grafana/dashboards/birdapi-dashboard.json
        dest: /var/lib/grafana/dashboards/birdapi-dashboard.json
        owner: grafana
        group: grafana

    - name: Restart Grafana
      systemd:
        name: grafana-server
        state: restarted
   
    - name: Deploy birdImage API using Helm
      environment: 
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      shell: helm install birdimageapi /home/ubuntu/devops-challenge/helm-charts/birdImage/ -f /home/ubuntu/devops-challenge/helm-charts/birdImage/values-amd64.yaml

    - name: Deploy bird API using Helm
      environment:
        KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
      shell: helm install birdapi /home/ubuntu/devops-challenge/helm-charts/bird/ -f /home/ubuntu/devops-challenge/helm-charts/bird/values-amd64.yaml --set birdImageApiReleaseName=birdimageapi

    - name: Update and upgrade system
      apt:
        update_cache: yes
        upgrade: dist
        autoremove: yes

    - name: Disable root login via SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: 'PermitRootLogin no'

    - name: Ensure SSH uses key-based authentication only
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication no'

    - name: Restart SSH service to apply changes
      systemd:
        name: ssh
        state: restarted

    - name: Install UFW
      apt:
        name: ufw
        state: present

    - name: Allow SSH, HTTP, and HTTPS traffic
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      with_items:
        - "22"   
        - "80"   
        - "443"

    - name: Allow NodePort 30001 for bird API
      ufw:
        rule: allow
        port: "30001"
        proto: tcp

 .  - name: Allow NodePort 30002 for Grafana
      ufw:
        rule: allow
        port: "30002"
        proto: tcp


    - name: Enable UFW to apply all rules
      ufw:
        state: enabled

    - name: Install unattended-upgrades
      apt:
        name: unattended-upgrades
        state: present